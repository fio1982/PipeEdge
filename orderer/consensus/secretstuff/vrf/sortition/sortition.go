package sortition

import (
	"log"
	"math/big"
)

const sortitionThreshold float64 = 0.3

//Sortition returns true/false decide by threshold which is const value
func Sortition(ratio float64) bool {
	if ratio > sortitionThreshold {
		return false
	}
	return true
}

//HashRatio calculates a float number between [0, 1] with a random hash value which generated by vrf
func HashRatio(vrfOutput []byte) float64 {

	t := &big.Int{}
	t.SetBytes(vrfOutput[:])

	precision := uint(8 * (len(vrfOutput) + 1))
	max, b, err := big.ParseFloat("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 0, precision, big.ToNearestEven)
	if b != 16 || err != nil {
		log.Fatal("failed to parse big float constant for sortition")
	}

	//hash value as int expression.
	//hval, _ := h.Float64() to get the value
	h := big.Float{}
	h.SetPrec(precision)
	h.SetInt(t)

	ratio := big.Float{}
	cratio, _ := ratio.Quo(&h, max).Float64()

	return cratio
}
